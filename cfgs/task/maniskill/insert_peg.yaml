# if given, will override the device setting in gym. 
env: 
  env_name: "maniskill@insert_peg"
  numEnvs: 128  #! default is 128
  envSpacing: 0.0
  episodeLength: 75
  enableDebugVis: False
  cameraDebug: True
  pointCloudDebug: True
  aggregateMode: 1

  stiffnessScale: 1.0
  forceLimitScale: 1.0
  useRelativeControl: True  #! default is True
  dofSpeedScale: 20.0
  attractorSpeedScale: 20.0
  actionsMovingAverage: 1.0
  controlFrequencyInv: 1 # 60 Hz

  startPositionNoise: 0.0
  startRotationNoise: 0.0

  resetPositionNoise: 0.0
  resetRotationNoise: 0.0
  resetDofPosRandomInterval: 0.0
  resetDofVelRandomInterval: 0.0

  distRewardScale: 50
  rotRewardScale: 1.0
  rotEps: 0.1
  actionPenaltyScale: -0.0002
  reachGoalBonus: 250
  fallDistance: 0.4
  fallPenalty: 0.0

  observationType: "full_state"  # full_state or robot_state
  asymmetric_observations: False
  successTolerance: 0.1
  printNumSuccesses: False
  maxConsecutiveSuccesses: 0

  actionType: "dummy_interaction_sphere"
  asset:
    agent:
      assetRoot: "./assets/agent"
      panda-wovis: "panda_gripper/robots/panda-wovis.urdf"
      panda-wvis: "panda_gripper/robots/panda.urdf"
      sphere-wovis: "sphere/sphere-wovis.urdf"
      sphere-wvis: "sphere/sphere.urdf"
      franka: "franka_urdf/robots/franka_panda.urdf"
      franka-wovis: "franka_urdf/robots/franka_panda-wovis.urdf"
    object:
      assetRoot: "./assets/env/maniskill"
      floor: "floor.xml"
      room_0: "room/room.urdf"
      room_1: "room/room.urdf"
      stick: "miscs/stick.urdf"
      holebox: "miscs/holebox.urdf"
      table: "table.urdf"
    placement:
      floor:
        pos: [0, 0, -0.01]
        rot: [0, 0, 0]  ## rot as euler_xyz
      room_0:
        pos: [-2.0, 1.0, 0.0]
        rot: [0, 0, 0]
      room_1:
        pos: [2.0, -3.0, 0.0]
        rot: [0.0, 0.0, 3.14]
      stick: 
        pos: [-0.15, -0.1, 1.223]  ## default pose
        # pos: [0.04, -0.043, 1.308]  ## goal pose
        rot: [0, 0, 0.523]
      holebox:
        pos: [0.1, 0.0, 1.308]  ## default pose
        rot: [0, 0, 0.523]
      table:
        pos: [0.0, 0.0, 0.5]
        rot: [0, 0, 0]

task:
  randomize: False
  randomization_params:
    frequency: 600   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0., 0.] # range for the white noise
      range_correlated: [0., 0.] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      schedule_steps: 40000
    actions:
      range: [0., .05]
      range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      schedule_steps: 40000
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 40000
    actor_params:
      hand:
        color: True
        tendon_properties:
          damping:
            range: [0.3, 3.0]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          stiffness:
            range: [0.75, 1.5]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        dof_properties:
          damping: 
            range: [0.3, 3.0]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          stiffness: 
            range: [0.75, 1.5]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        rigid_shape_properties:
          friction: 
            num_buckets: 250
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
      object:
        scale:
          range: [0.95, 1.05]
          operation: "scaling"
          distribution: "uniform"
          schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
          schedule_steps: 30000
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000

repre: None
# repre: 
#   handcrafted:
#     model: None # representation model name
#     checkpoints: "./checkpoints" # path to the checkpoints
  

sim:
  substeps: 2
  physx:
    num_threads: 4
    solver_type: 1  # 0: pgs, 1: tgs
    num_position_iterations: 8
    num_velocity_iterations: 0
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
  flex:
    num_outer_iterations: 5
    num_inner_iterations: 20
    warm_start: 0.8
    relaxation: 0.75
